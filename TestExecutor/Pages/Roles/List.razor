@page "/roles/list"
@inject IRolesStore<Role> rolesService
@inject NavigationManager navigationManager

<div class="p-4">
	<div class="card">
		<div class="card-header bg-blueberry">
			<div class="d-flex justify-content-between">
				<h5 class="h5 mb-2 mt-2"><span class="oi oi-lock-locked" aria-hidden="true"></span> Roles</h5>
				<div class="btn-toolbar mb-2 mb-md-0">
					<div class="btn-group btn-sm">
						@if (UserRole == "Root" || UserRole == "Manager" || UserRole == "Developer")
						{
							if (Roles != null)
							{
								<button class="btn btn-kiwi" @onclick="Export"><span class="oi oi-data-transfer-download"></span> Export data</button>
							}
							if (UserRole == "Root" || UserRole == "Developer")
							{
								<button class="btn btn-grass" @onclick="Create"><span class="oi oi-plus" aria-hidden="true"></span> Add</button>
							}
						}
					</div>
				</div>
			</div>
		</div>
		<div class="card-body">
			@if (Roles == null)
			{
				<p><em>Loading...</em></p>
			}
			else
			{
				<RadzenDataGrid AllowFiltering="true" FilterMode="FilterMode.Simple" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowColumnResize="true"
							AllowPaging="true" AllowSorting="true" Data="Roles" TItem="Role" ColumnWidth="250px" Style="height:585px">
					<Columns>
						<RadzenDataGridColumn Frozen="true" TItem="Role" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="50px">
							<Template>
								@(Roles.IndexOf(context) + 1)
							</Template>
						</RadzenDataGridColumn>
						<RadzenDataGridColumn Frozen="true" TItem="Role" Property="Name" Title="Name">
							<FooterTemplate>
								Total records: <b>@Roles.Count()</b>
							</FooterTemplate>
						</RadzenDataGridColumn>
						<RadzenDataGridColumn TItem="Role" Property="Description" Title="Description" Width="600px"></RadzenDataGridColumn>
						@if (ShowActionButtons)
						{
							<RadzenDataGridColumn TextAlign="TextAlign.Center" TItem="Role" Sortable="false" Filterable="false" Width="@ActionsColumnWidth">
								<Template Context="data">
									<div class="btn-group w-100">
										<button class="btn btn-olive" title="Edit" @onclick="() => Edit(data.Id)">
											<span class="oi oi-pencil" aria-hidden="true"></span>
										</button>
										<button class="btn btn-caution" title="Delete" @onclick="() => Delete(data.Id)">
											<span class="oi oi-trash" aria-hidden="true"></span>
										</button>
									</div>
								</Template>
							</RadzenDataGridColumn>
						}
					</Columns>
				</RadzenDataGrid>
			}
		</div>
	</div>
</div>

@if (ShowCreateModal)
{
	<div class="modal fade show" style="display:block" tabindex="-1">
		<div class="modal-dialog modal-dialog-centered modal-lg modal-dialog-scrollable">
			<div class="modal-content">
				<div class="modal-header bg-blueberry">
					<h5 class="modal-title"><span class="oi oi-plus" aria-hidden="true"></span> New role</h5>
					<button type="button" class="btn-close btn-close-white" @onclick="() => Cancel(1)"></button>
				</div>
				<div class="modal-body">
					<EditForm Model="Role">
						<div class="form-floating mb-3">
							<InputText class="form-control" placeholder="Name" @bind-Value="Role.Name"></InputText>
							<label>Name</label>
						</div>
						<div class="form-floating">
							<InputText class="form-control" placeholder="Description" @bind-Value="Role.Description"></InputText>
							<label>Description</label>
						</div>
					</EditForm>
				</div>
				<div class="modal-footer bg-light">
					<div class="btn-group btn-sm w-100">
						<button class="btn btn-confirm" @onclick="() => Save(1)"><span class="oi oi-check" aria-hidden="true"></span> Accept</button>
						<button type="button" class="btn btn-mist" @onclick="() => Cancel(1)"><span class="oi oi-ban" aria-hidden="true"></span> Cancel</button>
					</div>
				</div>
			</div>
		</div>
	</div>
	<div class="modal-backdrop fade show"></div>
}

@if (ShowEditModal)
{
	<div class="modal fade show" style="display:block" tabindex="-1">
		<div class="modal-dialog modal-dialog-centered modal-lg modal-dialog-scrollable">
			<div class="modal-content">
				<div class="modal-header bg-blueberry">
					<h5 class="modal-title"><span class="oi oi-pencil" aria-hidden="true"></span> Edit role</h5>
					<button type="button" class="btn-close btn-close-white" @onclick="() => Cancel(2)"></button>
				</div>
				<div class="modal-body">
					<EditForm Model="Role">
						<div class="form-floating mb-3">
							<InputText class="form-control" placeholder="Name" @bind-Value="Role.Name" disabled></InputText>
							<label>Name</label>
						</div>
						<div class="form-floating">
							<InputText class="form-control" placeholder="Description" @bind-Value="Role.Description"></InputText>
							<label>Description</label>
						</div>
					</EditForm>
				</div>
				<div class="modal-footer bg-light">
					<div class="btn-group btn-sm w-100">
						<button class="btn btn-confirm" @onclick="() => Save(2)"><span class="oi oi-check" aria-hidden="true"></span> Accept</button>
						<button type="button" class="btn btn-mist" @onclick="() => Cancel(2)"><span class="oi oi-ban" aria-hidden="true"></span> Cancel</button>
					</div>
				</div>
			</div>
		</div>
	</div>
	<div class="modal-backdrop fade show"></div>
}

@if (IsLoading)
{
	<div class="modal fade show" style="display:block" tabindex="-1">
		<div class="modal-dialog modal-dialog-centered modal-sm modal-dialog-scrollable">
			<div class="modal-content">
				<div class="modal-header bg-blueberry">
					<h5 class="modal-title"><span class="oi oi-clock" aria-hidden="true"></span> Wait...</h5>
				</div>
				<div class="modal-body" style="min-height:250px">
					<div class="spinner"></div>
				</div>
			</div>
		</div>
	</div>
	<div class="modal-backdrop fade show"></div>
}

@code {
	private IList<Role> Roles;
	private Role Role = new();
	private Boolean IsLoading = false;
	private Boolean ShowCreateModal = false;
	private Boolean ShowEditModal = false;
	private Boolean ShowActionButtons = false;
	private String ActionsColumnWidth;
	private String UserRole;

	private async Task Export()
	{
		IsLoading = true;

		try
		{
			var dataTable = new DataTable("Roles");

			dataTable.Columns.AddRange(new DataColumn[3]
			{
				new DataColumn("#"),
				new DataColumn("Name"),
				new DataColumn("Description")
			});

			foreach (var role in Roles)
				dataTable.Rows.Add((Roles.IndexOf(role) + 1),
				role.Name,
				role.Description);

			var workBook = new XLWorkbook();
			var workSheet = workBook.Worksheets.Add(dataTable);

			workSheet.RangeUsed().Style.Font.FontName = "Cambria";
			workSheet.ColumnsUsed().AdjustToContents();

			var memoryStream = new MemoryStream();

			workBook.SaveAs(memoryStream);

			await FileSaver.SaveAsync($"Roles.xlsx", memoryStream, default);
		}
		catch (Exception)
		{
			await App.Current.MainPage.DisplayAlert("Incorrect", "An unexpected error occurred!", "Ok");
		}

		await Task.Delay(1000);

		IsLoading = false;
	}

	private async Task LoadRoles() => Roles = await rolesService.GetRolesAsync();

	private void Create() => ShowCreateModal = true;

	private async Task Edit(String id)
	{
		if (Connectivity.NetworkAccess == NetworkAccess.Internet)
		{
			Role = await rolesService.GetRoleAsync(id);

			if (Role != null)
				ShowEditModal = true;
			else
				await App.Current.MainPage.DisplayAlert("Incorrect", "No role information found!", "Ok");
		}
		else
			await App.Current.MainPage.DisplayAlert("Connection error", "Please check your internet connection and try again!", "Ok");
	}

	private async Task Save(Int32 action)
	{
		if (String.IsNullOrEmpty(Role.Name) && String.IsNullOrWhiteSpace(Role.Name) ||
			String.IsNullOrEmpty(Role.Description) && String.IsNullOrWhiteSpace(Role.Description))
			await App.Current.MainPage.DisplayAlert("Warning", "One or more fields are empty!", "Ok");
		else
		{
			if (Connectivity.NetworkAccess == NetworkAccess.Internet)
			{
				if (action == 1)
				{
					Role.Id = Guid.NewGuid().ToString();
					Role.ConcurrencyStamp = Guid.NewGuid().ToString();
					Role.NormalizedName = Role.Name.ToUpper();

					var role = await rolesService.AddRoleAsync(Role);

					if (role != null)
					{
						ShowCreateModal = false;
						Role = new();
					}
				}
				else
				{
					var role = await rolesService.UpdateRoleAsync(Role);

					if (role != null)
					{
						ShowEditModal = false;
						Role = new();
					}
				}

				await LoadRoles();
			}
			else
				await App.Current.MainPage.DisplayAlert("Connection error", "Please check your internet connection and try again!", "Ok");
		}
    }

    private void Cancel(Int32? action)
    {
        if (action == 1)
            ShowCreateModal = false;
		else
			ShowEditModal = false;

        Role = new();
    }

    private async Task Delete(String id)
    {
		if (await App.Current.MainPage.DisplayAlert("Delete", "Are you sure to delete this role?", "Yes", "No"))
        {
			if (Connectivity.NetworkAccess == NetworkAccess.Internet)
			{
				await rolesService.DeleteRoleAsync(id);
				await LoadRoles();
			}
			else
				await App.Current.MainPage.DisplayAlert("Connection error", "Please check your internet connection and try again!", "Ok");
		}
    }

    protected override async Task OnInitializedAsync()
    {
        if (Preferences.ContainsKey("role"))
            UserRole = Preferences.Get("role", null) as String;

        if (UserRole == "Root" || UserRole == "Developer")
        {
            ShowActionButtons = true;
            ActionsColumnWidth = "120px";
        }
        else
            ActionsColumnWidth = "60px";

		if (Connectivity.NetworkAccess == NetworkAccess.Internet)
			await LoadRoles();
		else
		{
			await App.Current.MainPage.DisplayAlert("Connection error", "Please check your internet connection and try again!", "Ok");

			navigationManager.NavigateTo($"/roles/list", true);
		}
    }
}