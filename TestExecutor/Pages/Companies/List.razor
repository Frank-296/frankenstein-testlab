@page "/companies/list"
@inject ICompaniesStore<Company> companiesService
@inject NavigationManager navigationManager

<div class="p-4">
	<div class="card">
		<div class="card-header bg-blueberry">
			<div class="d-flex justify-content-between">
				<h5 class="h5 mb-2 mt-2"><span class="oi oi-briefcase" aria-hidden="true"></span> Companies</h5>
				<div class="btn-toolbar mb-2 mb-md-0">
					<div class="btn-group btn-sm">
						@if (Role == "Root" || Role == "Manager")
						{
							if (Companies != null)
							{
								<button class="btn btn-kiwi" @onclick="Export"><span class="oi oi-data-transfer-download"></span> Export data</button>
							}
							<button class="btn btn-grass" @onclick="Create"><span class="oi oi-plus" aria-hidden="true"></span> Add</button>
						}
					</div>
				</div>
			</div>
		</div>
		<div class="card-body">
			@if (Companies == null)
			{
				<p><em>Loading...</em></p>
			}
			else
			{
				<RadzenDataGrid AllowFiltering="true" FilterMode="FilterMode.Simple" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowColumnResize="true"
							AllowPaging="true" AllowSorting="true" Data="Companies" TItem="Company" ColumnWidth="250px" Style="height:585px">
					<Columns>
						<RadzenDataGridColumn Frozen="true" TItem="Company" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="50px">
							<Template>
								@(Companies.IndexOf(context) + 1)
							</Template>
						</RadzenDataGridColumn>
						<RadzenDataGridColumn Frozen="true" TItem="Company" Property="Name" Title="Name">
							<FooterTemplate>
								Total records: <b>@Companies.Count()</b>
							</FooterTemplate>
						</RadzenDataGridColumn>
						<RadzenDataGridColumn TItem="Company" Property="Domain" Title="Domain" Width="600px"></RadzenDataGridColumn>
						@if (ShowActionButtons)
						{
							<RadzenDataGridColumn TextAlign="TextAlign.Center" TItem="Company" Sortable="false" Filterable="false" Width="@ActionsColumnWidth">
								<Template Context="data">
									<div class="btn-group w-100">
										<button class="btn btn-olive" title="Edit" @onclick="() => Edit(data.CompanyId)">
											<span class="oi oi-pencil" aria-hidden="true"></span>
										</button>
										<button class="btn btn-caution" title="Delete" @onclick="() => Delete(data.CompanyId)">
											<span class="oi oi-trash" aria-hidden="true"></span>
										</button>
									</div>
								</Template>
							</RadzenDataGridColumn>
						}
					</Columns>
				</RadzenDataGrid>
			}
		</div>
	</div>
</div>

@if (ShowCreateModal)
{
	<div class="modal fade show" style="display:block" tabindex="-1">
		<div class="modal-dialog modal-dialog-centered modal-lg modal-dialog-scrollable">
			<div class="modal-content">
				<div class="modal-header bg-blueberry">
					<h5 class="modal-title"><span class="oi oi-plus" aria-hidden="true"></span> New company</h5>
					<button type="button" class="btn-close btn-close-white" @onclick="() => Cancel(1)"></button>
				</div>
				<div class="modal-body">
					<EditForm Model="Company">
						<div class="form-floating mb-3">
							<InputText class="form-control" placeholder="Name" @bind-Value="Company.Name"></InputText>
							<label>Name</label>
						</div>
						<div class="form-floating">
							<InputText class="form-control" placeholder="Domain" @bind-Value="Company.Domain"></InputText>
							<label>Domain</label>
						</div>
					</EditForm>
				</div>
				<div class="modal-footer bg-light">
					<div class="btn-group btn-sm w-100">
						<button class="btn btn-confirm" @onclick="() => Save(1)"><span class="oi oi-check" aria-hidden="true"></span> Accept</button>
						<button type="button" class="btn btn-mist" @onclick="() => Cancel(1)"><span class="oi oi-ban" aria-hidden="true"></span> Cancel</button>
					</div>
				</div>
			</div>
		</div>
	</div>
	<div class="modal-backdrop fade show"></div>
}

@if (ShowEditModal)
{
	<div class="modal fade show" style="display:block" tabindex="-1">
		<div class="modal-dialog modal-dialog-centered modal-lg modal-dialog-scrollable">
			<div class="modal-content">
				<div class="modal-header bg-blueberry">
					<h5 class="modal-title"><span class="oi oi-pencil" aria-hidden="true"></span> Edit company</h5>
					<button type="button" class="btn-close btn-close-white" @onclick="() => Cancel(2)"></button>
				</div>
				<div class="modal-body">
					<EditForm Model="Company">
						<div class="form-floating mb-3">
							<InputText class="form-control" placeholder="Name" @bind-Value="Company.Name"></InputText>
							<label>Name</label>
						</div>
						<div class="form-floating">
							<InputText class="form-control" placeholder="Domain" @bind-Value="Company.Domain"></InputText>
							<label>Domain</label>
						</div>
					</EditForm>
				</div>
				<div class="modal-footer bg-light">
					<div class="btn-group btn-sm w-100">
						<button class="btn btn-confirm" @onclick="() => Save(2)"><span class="oi oi-check" aria-hidden="true"></span> Accept</button>
						<button type="button" class="btn btn-mist" @onclick="() => Cancel(2)"><span class="oi oi-ban" aria-hidden="true"></span> Cancel</button>
					</div>
				</div>
			</div>
		</div>
	</div>
	<div class="modal-backdrop fade show"></div>
}

@if (IsLoading)
{
	<div class="modal fade show" style="display:block" tabindex="-1">
		<div class="modal-dialog modal-dialog-centered modal-sm modal-dialog-scrollable">
			<div class="modal-content">
				<div class="modal-header bg-blueberry">
					<h5 class="modal-title"><span class="oi oi-clock" aria-hidden="true"></span> Wait...</h5>
				</div>
				<div class="modal-body" style="min-height:250px">
					<div class="spinner"></div>
				</div>
			</div>
		</div>
	</div>
	<div class="modal-backdrop fade show"></div>
}

@code {
	private IList<Company> Companies;
	private Company Company = new();
	private Boolean IsLoading = false;
	private Boolean ShowCreateModal = false;
	private Boolean ShowEditModal = false;
	private Boolean ShowActionButtons = false;
	private String ActionsColumnWidth;
	private String Role;

	private async Task Export()
	{
		IsLoading = true;

		try
		{
			var dataTable = new DataTable("Companies");

			dataTable.Columns.AddRange(new DataColumn[3]
			{
				new DataColumn("#"),
				new DataColumn("Name"),
				new DataColumn("Domain")
			});

			foreach (var company in Companies)
				dataTable.Rows.Add((Companies.IndexOf(company) + 1),
				company.Name,
				company.Domain);

			var workBook = new XLWorkbook();
			var workSheet = workBook.Worksheets.Add(dataTable);

			workSheet.RangeUsed().Style.Font.FontName = "Cambria";
			workSheet.ColumnsUsed().AdjustToContents();

			var memoryStream = new MemoryStream();

			workBook.SaveAs(memoryStream);

			await FileSaver.SaveAsync($"Companies.xlsx", memoryStream, default);
		}
		catch (Exception)
		{
			await App.Current.MainPage.DisplayAlert("Incorrect", "An unexpected error occurred!", "Ok");
		}

		await Task.Delay(1000);

		IsLoading = false;
	}

	private async Task LoadCompanies() => Companies = await companiesService.GetCompaniesAsync();

	private void Create() => ShowCreateModal = true;

	private async Task Edit(String id)
	{
		if (Connectivity.NetworkAccess == NetworkAccess.Internet)
		{
			Company = await companiesService.GetCompanyAsync(id);

			if (Company != null)
				ShowEditModal = true;
			else
				await App.Current.MainPage.DisplayAlert("Incorrect", "No company information found!", "Ok");
		}
		else
			await App.Current.MainPage.DisplayAlert("Connection error", "Please check your internet connection and try again!", "Ok");
	}

	private async Task Save(Int32 action)
	{
		if (String.IsNullOrEmpty(Company.Name) && String.IsNullOrWhiteSpace(Company.Name) ||
			String.IsNullOrEmpty(Company.Domain) && String.IsNullOrWhiteSpace(Company.Domain))
			await App.Current.MainPage.DisplayAlert("Warning", "One or more fields are empty!", "Ok");
		else
		{
			if (Connectivity.NetworkAccess == NetworkAccess.Internet)
			{
				if (action == 1)
				{
					Company.CompanyId = Guid.NewGuid().ToString();

					var company = await companiesService.AddCompanyAsync(Company);

					if (company != null)
					{
						ShowCreateModal = false;
						Company = new();
					}
				}
				else
				{
					var company = await companiesService.UpdateCompanyAsync(Company);

					if (company != null)
					{
						ShowEditModal = false;
						Company = new();
					}
				}

				await LoadCompanies();
			}
			else
				await App.Current.MainPage.DisplayAlert("Connection error", "Please check your internet connection and try again!", "Ok");
		}
	}

	private void Cancel(Int32? action)
	{
		if (action == 1)
			ShowCreateModal = false;
		else
			ShowEditModal = false;

		Company = new();
	}

	private async Task Delete(String id)
	{
		if (await App.Current.MainPage.DisplayAlert("Delete", "Are you sure to delete this company?", "Yes", "No"))
		{
			if (Connectivity.NetworkAccess == NetworkAccess.Internet)
			{
				await companiesService.DeleteCompanyAsync(id);
				await LoadCompanies();
			}
			else
				await App.Current.MainPage.DisplayAlert("Connection error", "Please check your internet connection and try again!", "Ok");
		}
	}

	protected override async Task OnInitializedAsync()
	{
		if (Preferences.ContainsKey("role"))
			Role = Preferences.Get("role", null) as String;

		if (Role == "Root" || Role == "Manager")
		{
			ShowActionButtons = true;
			ActionsColumnWidth = "120px";
		}
		else
			ActionsColumnWidth = "60px";

		if (Connectivity.NetworkAccess == NetworkAccess.Internet)
			await LoadCompanies();
		else
		{
			await App.Current.MainPage.DisplayAlert("Connection error", "Please check your internet connection and try again!", "Ok");

			navigationManager.NavigateTo($"/companies/list", true);
		}
	}
}