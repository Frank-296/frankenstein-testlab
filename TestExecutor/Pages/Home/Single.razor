@page "/home/executions/list"
@inject IExecutionsStore<Execution> executionsService
@inject IRolesStore<Role> rolesService
@inject NavigationManager navigationManager

<div class="p-4">
	<div class="card">
		<div class="card-header bg-blueberry">
			<div class="d-flex justify-content-between">
				<h5 class="h5 mb-2 mt-2"><span class="oi oi-task" aria-hidden="true"></span> Single executions (@ExecutionStatusLabel)</h5>
				<div class="btn-toolbar mb-2 mb-md-0">
					<div class="btn-group btn-sm">
						@if (Executions != null)
						{
							<button class="btn btn-kiwi" @onclick="Export"><span class="oi oi-data-transfer-download"></span> Export data</button>
						}
					</div>
				</div>
			</div>
		</div>
		<div class="card-body @StatusBg">
			@if (Executions == null)
			{
				<p><em>Loading...</em></p>
			}
			else
			{
				<RadzenDataGrid AllowFiltering="true" FilterMode="FilterMode.Simple" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowColumnResize="true"
							AllowPaging="true" AllowSorting="true" Data="Executions" TItem="Execution" ColumnWidth="300px" Style="height:525px">
					<Columns>
						<RadzenDataGridColumn Frozen="true" TItem="Execution" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="50px">
							<Template>
								@(Executions.IndexOf(context) + 1)
							</Template>
						</RadzenDataGridColumn>
						<RadzenDataGridColumn Frozen="true" TItem="Execution" Property="ExecutionDate" Title="Date and time of execution" Width="150px">
							<FooterTemplate>
								Total records: <b>@Executions.Count()</b>
							</FooterTemplate>
						</RadzenDataGridColumn>
						<RadzenDataGridColumn TItem="Execution" Property="TestCase.Name" Title="Name" Width="240px"></RadzenDataGridColumn>
						<RadzenDataGridColumn TItem="Execution" Property="TestEnvironment" Title="Environment" Width="240px"></RadzenDataGridColumn>
						<RadzenDataGridColumn TItem="Execution" Property="User.DisplayName" Title="Executor" Width="180px"></RadzenDataGridColumn>
						<RadzenDataGridColumn TItem="Execution" Property="User.UserRoles.FirstOrDefault().Role.Name" Title="Role" Width="180px" Type="typeof(IEnumerable<String>)"
										  FilterValue="SelectedRoles" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.Or">
							<FilterTemplate>
								<RadzenDropDown @bind-Value=SelectedRoles Style="width:100%"
											Change=OnSelectedRolesChange Data="Roles" AllowClear="true" Multiple="true" />
							</FilterTemplate>
							<Template Context="data">
								<span>@data.User.UserRoles.FirstOrDefault().Role.Name</span>
							</Template>
						</RadzenDataGridColumn>
						<RadzenDataGridColumn TextAlign="TextAlign.Center" TItem="Execution" Sortable="false" Filterable="false" Width="@ActionsColumnWidth">
							<Template Context="data">
								<div class="btn-group w-100">
									<a class="btn btn-sky" title="Execution result" href="/executions/result/single/@data.ExecutionId/@data.TestCaseId/@data.TestCase.BusinessProcessId/@data.TestCase.BusinessProcess.TestApplicationId">
										<span class="oi oi-clipboard" aria-hidden="true"></span>
									</a>
									@if (ShowActionButtons)
									{
										if (data.SuiteExecutionId == null)
										{
											<button class="btn btn-caution" title="Delete" @onclick="() => Delete(data.ExecutionId)">
												<span class="oi oi-trash" aria-hidden="true"></span>
											</button>
										}
										else
										{
											<button class="btn btn-caution" title="Delete" disabled>
												<span class="oi oi-trash" aria-hidden="true"></span>
											</button>
										}
									}
								</div>
							</Template>
						</RadzenDataGridColumn>
					</Columns>
				</RadzenDataGrid>
			}
		</div>
		<div class="card-footer">
			<div class="btn-group btn-sm w-100">
				<button class="btn btn-grass" @onclick="() => LoadExecutions(ExecutionStatus.Pass)"><span class="oi oi-circle-check" aria-hidden="true"></span> Pass</button>
				<button class="btn btn-caution" @onclick="() => LoadExecutions(ExecutionStatus.Fail)"><span class="oi oi-circle-x" aria-hidden="true"></span> Fail</button>
				<button class="btn btn-pineapple" @onclick="() => LoadExecutions(ExecutionStatus.Stop)"><span class="oi oi-media-stop" aria-hidden="true"></span> Stop</button>
				<button class="btn btn-sky" @onclick="() => LoadExecutions(ExecutionStatus.NotRun)"><span class="oi oi-warning" aria-hidden="true"></span> Not run</button>
			</div>
		</div>
	</div>
</div>

@if (IsLoading)
{
	<div class="modal fade show" style="display:block" tabindex="-1">
		<div class="modal-dialog modal-dialog-centered modal-sm modal-dialog-scrollable">
			<div class="modal-content">
				<div class="modal-header bg-blueberry">
					<h5 class="modal-title"><span class="oi oi-clock" aria-hidden="true"></span> Wait...</h5>
				</div>
				<div class="modal-body" style="min-height:250px">
					<div class="spinner"></div>
				</div>
			</div>
		</div>
	</div>
	<div class="modal-backdrop fade show"></div>
}

@code {
	private IList<Execution> Executions;
	private IEnumerable<String> SelectedRoles;
	private List<String> Roles = new();
	private Boolean IsLoading = false;
	private Boolean ShowActionButtons = false;
	private String ActionsColumnWidth;
	private String ExecutionStatusLabel;
	private String StatusBg;
	private String Role;
	private String Id;

	private async Task Export()
	{
		IsLoading = true;

		try
		{
			var dataTable = new DataTable($"Executions");

			dataTable.Columns.AddRange(new DataColumn[13]
			{
				new DataColumn("#"),
				new DataColumn("Application"),
				new DataColumn("Business process"),
				new DataColumn("Test type"),
				new DataColumn("Test case"),
				new DataColumn("Date and time of execution"),
				new DataColumn("Environment"),
				new DataColumn("Browser"),
				new DataColumn("Executor"),
				new DataColumn("Role"),
				new DataColumn("Company"),
				new DataColumn("Remarks"),
				new DataColumn("Status")
			});

			foreach (var execution in Executions)
			{
				dataTable.Rows.Add((Executions.IndexOf(execution) + 1),
				execution.TestCase.BusinessProcess.TestApplication.Name,
				execution.TestCase.BusinessProcess.Name,
				execution.TestCase.TestType,
				execution.TestCase.Name,
				execution.ExecutionDate,
				execution.TestEnvironment,
				execution.BrowserDriver,
				execution.User.DisplayName,
				execution.User.UserRoles.FirstOrDefault().Role.Name,
				execution.User.Company.Name,
				execution.Remarks,
				execution.ExecutionStatus);
			}

			var workBook = new XLWorkbook();
			var workSheet = workBook.Worksheets.Add(dataTable);

			workSheet.RangeUsed().Style.Font.FontName = "Cambria";
			workSheet.ColumnsUsed().AdjustToContents();

			var memoryStream = new MemoryStream();

			workBook.SaveAs(memoryStream);

			await FileSaver.SaveAsync($"Executions ({ExecutionStatusLabel}).xlsx", memoryStream, default);
		}
		catch (Exception)
		{
			await App.Current.MainPage.DisplayAlert("Incorrect", "An unexpected error occurred!", "Ok");
		}

		await Task.Delay(1000);

		IsLoading = false;
	}

	private async Task LoadRoles()
	{
		var roles = await rolesService.GetRolesAsync();

		foreach (var role in roles)
			Roles.Add(role.Name);
	}

	private void OnSelectedRolesChange(Object value)
	{
		if (SelectedRoles != null && !SelectedRoles.Any())
			SelectedRoles = null;
	}

	private async Task LoadExecutions(ExecutionStatus executionStatus)
	{
		Executions = await executionsService.GetExecutionsAsync(null, Id, executionStatus);

		switch (executionStatus)
		{
			case ExecutionStatus.Pass:
				ExecutionStatusLabel = "Pass";
				StatusBg = "bg-grass";
				break;

			case ExecutionStatus.Fail:
				ExecutionStatusLabel = "Fail";
				StatusBg = "bg-mammee";
				break;

			case ExecutionStatus.Stop:
				ExecutionStatusLabel = "Stop";
				StatusBg = "bg-pineapple";
				break;

			case ExecutionStatus.NotRun:
				ExecutionStatusLabel = "Not run";
				StatusBg = "bg-sky";
				break;
		}

		Preferences.Set("executionStatus", executionStatus.ToString());
	}

	private async Task Delete(String executionId)
	{
		if (await App.Current.MainPage.DisplayAlert("Delete", "Are you sure to delete this execution?", "Yes", "No"))
		{
			if (Connectivity.NetworkAccess == NetworkAccess.Internet)
			{
				await executionsService.DeleteExecutionAsync(executionId);

				if (Preferences.ContainsKey("executionStatus"))
				{
					var executionStatus = Preferences.Get("executionStatus", null) as String;

					await LoadExecutions((ExecutionStatus)Enum.Parse(typeof(ExecutionStatus), executionStatus));
				}
				else
					await LoadExecutions(ExecutionStatus.Pass);
			}
			else
				await App.Current.MainPage.DisplayAlert("Connection error", "Please check your internet connection and try again!", "Ok");
		}
	}

	protected override async Task OnInitializedAsync()
	{
		if (Preferences.ContainsKey("id"))
			Id = Preferences.Get("id", null) as String;

		if (Preferences.ContainsKey("role"))
			Role = Preferences.Get("role", null) as String;

		if (Role == "Root" || Role == "Manager" || Role == "Administrator")
		{
			ShowActionButtons = true;
			ActionsColumnWidth = "120px";
		}
		else
			ActionsColumnWidth = "80px";

		if (Connectivity.NetworkAccess == NetworkAccess.Internet)
		{
			if (Preferences.ContainsKey("executionStatus"))
			{
				var executionStatus = Preferences.Get("executionStatus", null) as String;

				await LoadExecutions((ExecutionStatus)Enum.Parse(typeof(ExecutionStatus), executionStatus));
			}
			else
				await LoadExecutions(ExecutionStatus.Pass);

			await LoadRoles();
		}
		else
		{
			await App.Current.MainPage.DisplayAlert("Connection error", "Please check your internet connection and try again!", "Ok");

			navigationManager.NavigateTo($"/home/executions/list", true);
		}
	}
}