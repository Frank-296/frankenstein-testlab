@page "/executions/list/{testCaseId}/{businessProcessId}/{testApplicationId}"
@inject ITestCasesStore<TestCase> testCasesService
@inject IExecutionsStore<Execution> executionsService
@inject IRolesStore<Role> rolesService
@inject NavigationManager navigationManager

<div class="p-4">
	<div class="card">
		<div class="card-header bg-blueberry">
			<div class="d-flex justify-content-between">
				<h5 class="h5 mb-2 mt-2"><span class="oi oi-task" aria-hidden="true"></span> Executions (@TestCase.Name)</h5>
				<div class="btn-toolbar mb-2 mb-md-0">
					<div class="btn-group btn-sm">
						@if (Role == "Root" || Role == "Manager" || Role == "Administrator" || Role == "Automator")
						{
							if (Executions != null)
							{
								<button class="btn btn-kiwi" @onclick="Export"><span class="oi oi-data-transfer-download"></span> Export data</button>
							}
						}
						<a class="btn btn-grass" href="/executions/execute/executions/@TestCaseId/@BusinessProcessId/@TestApplicationId"><span class="oi oi-media-play"></span> Execute</a>
						<a class="btn btn-storm" href="/testCases/list/@BusinessProcessId/@TestApplicationId"><span class="oi oi-media-skip-backward"></span> Go back</a>
					</div>
				</div>
			</div>
		</div>
		<div class="card-body">
			@if (Executions == null)
			{
				<p><em>Loading...</em></p>
			}
			else
			{
				<RadzenDataGrid AllowFiltering="true" FilterMode="FilterMode.Simple" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowColumnResize="true"
							AllowPaging="true" AllowSorting="true" Data="Executions" TItem="Execution" CellRender="@CellRender" ColumnWidth="300px" Style="height:585px">
					<Columns>
						<RadzenDataGridColumn Frozen="true" TItem="Execution" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="50px">
							<Template>
								@(Executions.IndexOf(context) + 1)
							</Template>
						</RadzenDataGridColumn>
						<RadzenDataGridColumn Frozen="true" TItem="Execution" Property="ExecutionDate" Title="Date and time of execution" Width="150px">
							<FooterTemplate>
								Total records: <b>@Executions.Count()</b>
							</FooterTemplate>
						</RadzenDataGridColumn>
						<RadzenDataGridColumn TItem="Execution" Property="TestEnvironment" Title="Environment" Width="240px"></RadzenDataGridColumn>
						<RadzenDataGridColumn TItem="Execution" Property="User.DisplayName" Title="Executor" Width="180px">
						</RadzenDataGridColumn>
						<RadzenDataGridColumn TItem="Execution" Property="User.UserRoles.FirstOrDefault().Role.Name" Title="Role" Width="180px" Type="typeof(IEnumerable<String>)"
										  FilterValue="SelectedRoles" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.Or">
							<FilterTemplate>
								<RadzenDropDown @bind-Value=SelectedRoles Style="width:100%"
											Change=OnSelectedRolesChange Data="Roles" AllowClear="true" Multiple="true" />
							</FilterTemplate>
							<Template Context="data">
								<span>@data.User.UserRoles.FirstOrDefault().Role.Name</span>
							</Template>
						</RadzenDataGridColumn>
						<RadzenDataGridColumn TItem="Execution" Property="ExecutionStatus" Title="Status" Width="240px">
							<Template Context="data">
								@if (data.ExecutionStatus == ExecutionStatus.Stop)
								{
									<span>@data.ExecutionStatus</span>
								}
								else
								{
									<span style='color: var(--rz-text-contrast-color)'>@data.ExecutionStatus</span>
								}
							</Template>
						</RadzenDataGridColumn>
						<RadzenDataGridColumn TextAlign="TextAlign.Center" TItem="Execution" Sortable="false" Filterable="false" Width="@ActionsColumnWidth">
							<Template Context="data">
								<div class="btn-group w-100">
									<a class="btn btn-sky" title="Execution result" href="/executions/result/executions/@data.ExecutionId/@TestCaseId/@BusinessProcessId/@TestApplicationId">
										<span class="oi oi-clipboard" aria-hidden="true"></span>
									</a>
									@if (ShowActionButtons)
									{
										<button class="btn btn-caution" title="Delete" @onclick="() => Delete(data.ExecutionId)">
											<span class="oi oi-trash" aria-hidden="true"></span>
										</button>
									}
								</div>
							</Template>
						</RadzenDataGridColumn>
					</Columns>
				</RadzenDataGrid>
			}
		</div>
	</div>
</div>

@if (IsLoading)
{
	<div class="modal fade show" style="display:block" tabindex="-1">
		<div class="modal-dialog modal-dialog-centered modal-sm modal-dialog-scrollable">
			<div class="modal-content">
				<div class="modal-header bg-blueberry">
					<h5 class="modal-title"><span class="oi oi-clock" aria-hidden="true"></span> Wait...</h5>
				</div>
				<div class="modal-body" style="min-height:250px">
					<div class="spinner"></div>
				</div>
			</div>
		</div>
	</div>
	<div class="modal-backdrop fade show"></div>
}

@code {
	[Parameter]
	public String TestCaseId { get; set; }

	[Parameter]
	public String BusinessProcessId { get; set; }

	[Parameter]
	public String TestApplicationId { get; set; }

	private IList<Execution> Executions;
	private IEnumerable<String> SelectedRoles;
	private List<String> Roles = new();
	private TestCase TestCase = new();
	private Boolean IsLoading = false;
	private Boolean ShowActionButtons = false;
	private String ActionsColumnWidth;
	private String Role;
	private String Id;

	private async Task Export()
	{
		IsLoading = true;

		try
		{
			var dataTable = new DataTable("Executions");

			dataTable.Columns.AddRange(new DataColumn[10]
			{
				new DataColumn("#"),
				new DataColumn("Date and time of execution"),
				new DataColumn("Test type"),
				new DataColumn("Environment"),
				new DataColumn("Browser"),
				new DataColumn("Executor"),
				new DataColumn("Role"),
				new DataColumn("Company"),
				new DataColumn("Remarks"),
				new DataColumn("Status")
			});

			foreach (var execution in Executions)
				dataTable.Rows.Add((Executions.IndexOf(execution) + 1),
				execution.ExecutionDate,
				execution.TestCase.TestType,
				execution.TestEnvironment,
				execution.BrowserDriver,
				execution.User.DisplayName,
				execution.User.UserRoles.FirstOrDefault().Role.Name,
				execution.User.Company.Name,
				execution.Remarks,
				execution.ExecutionStatus);

			var workBook = new XLWorkbook();
			var workSheet = workBook.Worksheets.Add(dataTable);

			workSheet.RangeUsed().Style.Font.FontName = "Cambria";
			workSheet.ColumnsUsed().AdjustToContents();

			var memoryStream = new MemoryStream();

			workBook.SaveAs(memoryStream);

			await FileSaver.SaveAsync($"Executions ({TestCase.Name}).xlsx", memoryStream, default);
		}
		catch (Exception)
		{
			await App.Current.MainPage.DisplayAlert("Incorrect", "An unexpected error occurred!", "Ok");
		}

		await Task.Delay(1000);

		IsLoading = false;
	}

	private void CellRender(DataGridCellRenderEventArgs<Execution> args)
	{
		if (args.Column.Property == "ExecutionStatus")
		{
			switch (args.Data.ExecutionStatus)
			{
				case ExecutionStatus.NotRun:
					args.Attributes.Add("style", $"background-color: {(args.Data.ExecutionStatus == ExecutionStatus.NotRun ? "var(--sky)" : "var(--rz-base-background-color)")};");
					break;

				case ExecutionStatus.Stop:
					args.Attributes.Add("style", $"background-color: {(args.Data.ExecutionStatus == ExecutionStatus.Stop ? "var(--pineapple)" : "var(--rz-base-background-color)")};");
					break;

				case ExecutionStatus.Fail:
					args.Attributes.Add("style", $"background-color: {(args.Data.ExecutionStatus == ExecutionStatus.Fail ? "var(--mammee)" : "var(--rz-base-background-color)")};");
					break;

				case ExecutionStatus.Pass:
					args.Attributes.Add("style", $"background-color: {(args.Data.ExecutionStatus == ExecutionStatus.Pass ? "var(--grass)" : "var(--rz-base-background-color)")};");
					break;
			}
		}
	}

	private async Task LoadRoles()
	{
		var roles = await rolesService.GetRolesAsync();

		foreach (var role in roles)
			Roles.Add(role.Name);
	}

	private void OnSelectedRolesChange(Object value)
	{
		if (SelectedRoles != null && !SelectedRoles.Any())
			SelectedRoles = null;
	}

	private async Task LoadExecutions() => Executions = await executionsService.GetExecutionsAsync(TestCaseId, Id, null);

	private async Task Delete(String executionId)
	{
		if (await App.Current.MainPage.DisplayAlert("Delete", "Are you sure to delete this execution?", "Yes", "No"))
		{
			if (Connectivity.NetworkAccess == NetworkAccess.Internet)
			{
				await executionsService.DeleteExecutionAsync(executionId);
				await LoadExecutions();
			}
			else
				await App.Current.MainPage.DisplayAlert("Connection error", "Please check your internet connection and try again!", "Ok");
		}
	}

	protected override async Task OnInitializedAsync()
	{
		if (Preferences.ContainsKey("id"))
			Id = Preferences.Get("id", null) as String;

		if (Preferences.ContainsKey("role"))
			Role = Preferences.Get("role", null) as String;

		if (Role == "Root" || Role == "Manager" || Role == "Administrator" || Role == "Automator")
		{
			ShowActionButtons = true;
			ActionsColumnWidth = "120px";
		}
		else
			ActionsColumnWidth = "80px";

		if (Connectivity.NetworkAccess == NetworkAccess.Internet)
		{
			await LoadExecutions();
			await LoadRoles();

			TestCase = await testCasesService.GetTestCaseAsync(TestCaseId);
		}
		else
		{
			await App.Current.MainPage.DisplayAlert("Connection error", "Please check your internet connection and try again!", "Ok");

			navigationManager.NavigateTo($"/executions/list/{TestCaseId}/{BusinessProcessId}/{TestApplicationId}", true);
		}
	}
}